Q: What is a deadlock?
A: A deadlock is a situation in an operating system where a set of processes are permanently blocked because each process is waiting for a 
resource that another process in the same set is holding. In simple words, all the processes are waiting for each other, and none can proceed.

Q: What are the necessary conditions for deadlock?
A: According to Coffman’s conditions, four conditions must hold simultaneously for a deadlock to occur:
    Mutual Exclusion – At least one resource must be non-shareable.
    Hold and Wait – A process holding one resource can request additional resources.
    No Preemption – Resources cannot be forcibly taken away.
    Circular Wait – A circular chain of processes exists where each process waits for a resource held by the next.

Q: Can you give a simple example?
A: Sure. Imagine two processes:
    P1 holds resource R1 and waits for R2.
    P2 holds resource R2 and waits for R1.
    Both are waiting for each other, so they’re stuck forever.
        A real-life analogy is two people eating with two forks: each one has one fork and waits for the other fork to eat — neither can proceed.


Q: How can deadlocks be handled?
A: There are four main strategies:
    Prevention – Ensure that at least one of the Coffman conditions never holds.
    Avoidance – Use algorithms like the Banker’s Algorithm to allocate resources safely.
    Detection and Recovery – Allow deadlock to occur, then detect it and recover (e.g., killing processes or resource preemption).
    Ignore – In some cases (like Windows, Linux), deadlocks are so rare that the system just ignores them.

